<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
	- License, v. 2.0. If a copy of the MPL was not distributed with this
	- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
<!DOCTYPE bindings [
	<!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
	%globalDTD;
	<!ENTITY % mirrorsDTD SYSTEM "chrome://dta/locale/mirrors.dtd">
	%mirrorsDTD;
	<!ENTITY % defmirrorsDTD SYSTEM "chrome://dta-locale/content/mirrors.dtd">
	%defmirrorsDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<!-- closebox -->
	<binding id="closebox"
		extends="chrome://global/content/bindings/groupbox.xml#groupbox">
		<content>
			<xul:hbox class="groupbox-title closebox-title" align="center" pack="start">
				<xul:caption xbl:inherits="label=caption"/>
			</xul:hbox>
			<xul:box flex="1" class="childrenbox" xbl:inherits="orient,align,pack,collapsed=closed">
				<children />
			</xul:box>
		</content>
		<implementation implements="nsIAccessibleProvider">
			<property name="closed">
				<getter>
					return this.getAttribute('closed') == 'true';
				</getter>
				<setter>
					this.setAttribute('closed', val ? 'true' : 'false');
				</setter>
			</property>
			<property name="shouldResize">
				<getter>
					return this.getAttribute('shouldResize') == 'true';
				</getter>
				<setter>
					this.setAttribute('shouldResize', val ? 'true' : 'false');
				</setter>
			</property>
			<property name="accessibleType" readonly="true">
				<getter>
					<![CDATA[
						return Components.interfaces.nsIAccessibleProvider.XULGroupbox;
					]]>
				</getter>
			</property>
		</implementation>
	</binding>
	<binding id="closebox-title">
		<content>
			<xul:vbox pack="center" align="center" class="closebox-twisty">
				<xul:image class="closebox-icon"/>
			</xul:vbox>
			<children includes="caption" />
		</content>
		<handlers>
			<handler event="click"><![CDATA[
				this.parentNode.closed = !this.parentNode.closed;
				if (this.parentNode.shouldResize) {
					window.sizeToContent();
				}
			]]></handler>
		</handlers>
	</binding>

	<binding id="saveddropdown">
		<content>
			<xul:menulist anonid="list" editable="true"
				xbl:inherits="crop,readonly,disabled,flex,tooltiptext,oninput=onchange,onselect=onchange,invalid,placeholder">
				<xul:menupopup anonid="popup"
					xbl:inherits="crop,onselect=onchange,oncommand=onchange" />
			</xul:menulist>
		</content>
		<implementation>
			<constructor><![CDATA[
				this._load();
			]]></constructor>
			<field name="_list">document.getAnonymousElementByAttribute(this, 'anonid', 'list');</field>
			<field name="_popup">document.getAnonymousElementByAttribute(this, 'anonid', 'popup');</field>
			<property name="_pref" onget="return this.getAttribute('preference')" />
			<property name="_values">
				<getter><![CDATA[
					return this.hist.values;
				]]></getter>
			</property>
			<property name="inputField" onget="return this._list.inputField" />
			<property name="value" onget="return this._list.label">
				<setter>
					val = val.toString();
					if (this.value == val) {
						return;
					}
					this._list.label = val;
				</setter>
			</property>
			<property name="isPrivate" onget="return this.getAttribute('isPrivate')">
				<setter><![CDATA[
					val = !!val;
					if (this.isPrivate != val) {
						this.setAttribute("isPrivate", val);
						this.reload();
					}
				]]></setter>
			</property>
			<method name="_load">
				<body><![CDATA[
					try {
						let glue = {};
						Components.utils.import("chrome://dta-modules/content/glue.jsm", glue);
						this.hist = glue.require("support/historymanager").getHistory(this._pref, this.isPrivate);
					}
					catch (ex) {
						Components.utils.reportError(ex);
					}
					var values = this._values;
					var popup = this._popup;

					while (popup.hasChildNodes()) {
						popup.removeChild(popup.lastChild);
					}

					for (var val of values) {
						var node = document.createElement('menuitem');
						node.setAttribute('label', val);
						if (this.hasAttribute('crop')) {
							node.setAttribute('crop', this.getAttribute('crop'));
						}
						popup.appendChild(node);
					}

					if (values.length) {
						this._list.selectedIndex = 0;
						this.value = values[0];
					}
					if (this.hasAttribute('readonly')) {
						this._list.removeAttribute('editable');
					}
				]]></body>
			</method>
			<method name="reload">
				<body>this._load();</body>
			</method>
			<method name="save">
				<parameter name="once"/>
				<body><![CDATA[
					var n = this.value;
					if (n.length == 0 && !this.hasAttribute('allowempty')) {
						return;
					}
					this.hist.push(n, once);
				]]></body>
			</method>
			<method name="clear">
				<body>
					this.hist.reset();
				</body>
			</method>
		</implementation>
	</binding>

	<binding id="metalinker-item"
		extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
		<content>
			<xul:vbox flex="1">
				<xul:hbox class="metalink-mainbox" flex="1">
					<xul:image class="metalinker-icon" xbl:inherits="src=iconURL" />
					<xul:vbox class="metalink-infobox" flex="1">
						<xul:checkbox anonid="check" xbl:inherits="label=identity,checked" />
						<xul:hbox flex="1" anonid="additionallinks" />
						<xul:hbox>
							<xul:description flex="1" crop="center"
								xbl:inherits="value=url" />
						</xul:hbox>
					</xul:vbox>
					<xul:vbox class="metalinker-additional" anonid="additional" />
				</xul:hbox>
				<xul:description class="metalinker-description"
					flex="1" anonid="desc" />
			</xul:vbox>
		</content>

		<implementation>
			<constructor><![CDATA[
				var dl = this.download;
				this.setAttribute('checked', dl.selected);
				var id = '';
				if (dl.identity) {
					id = dl.identity + ' (' + dl.fileName + ')';
				}
				else {
					id = dl.fileName;
				}
				this.setAttribute('identity', id);
				this.setAttribute('iconURL', dl.logo ? dl.logo : getIcon(dl.url, false, 32));
				this.setAttribute('url', dl.url.usable);

				function addSimple(e) {
					if (dl[e]) {
						var n = document.createElement('description');
						n.appendChild(document.createTextNode(_(e, [dl[e]])));
						n.setAttribute('crop', 'end');
						this._additional.appendChild(n);
					}
				};
				function addLink(e) {
					if (dl[e]) {
						var n = document.createElement('description');
						n.setAttribute('class', 'text-link');
						n.setAttribute('onclick', 'MetaSelect.openLink(this)');
						n.setAttribute('crop', 'center');
						n.setAttribute('flex', '1');
						n.link = dl[e][1];
						n.appendChild(document.createTextNode(dl[e][0]));
						this._additionalLinks.appendChild(n);
					}
				};
				['size', 'version', 'sys', 'lang', 'copyright', 'mirrors'].forEach(addSimple, this);
				['publisher', 'license'].forEach(addLink, this);

				if (dl.description) {
					this._desc.appendChild(document.createTextNode(dl.description));
				}
			]]></constructor>
			<field name="_checkbox">document.getAnonymousElementByAttribute(this,
				'anonid', 'check');</field>
			<field name="_additional">document.getAnonymousElementByAttribute(this,
				'anonid', 'additional');</field>
			<field name="_additionalLinks">document.getAnonymousElementByAttribute(this,
				'anonid', 'additionallinks');</field>
			<field name="_desc">document.getAnonymousElementByAttribute(this,
				'anonid', 'desc');</field>
			<property name="checked" onget="return this._checkbox.checked;"
				onset="this._checkbox.checked = !!val; return !!val;" />
		</implementation>
	</binding>

	<binding id="hashinput">
		<content>
			<xul:hbox flex="1">
				<xul:menulist anonid="type" readonly="true" xbl:inherits="disabled">
					<xul:menupopup anonid="types" />
				</xul:menulist>
				<xul:textbox anonid="hash" flex="1" xbl:inherits="readonly,disabled,invalid"
					type="autocomplete" />
			</xul:hbox>
		</content>
		<implementation>
			<constructor><![CDATA[
				this._typemap = {};
				for (x in DTA.SUPPORTED_HASHES) {
					var e = document.createElement('menuitem');
					e.setAttribute('value', x);
					e.setAttribute('label', x);
					this._types.appendChild(e);
					this._typemap[x] = e;
					if (x == "SHA1") {
						this._types.parentNode.selectedItem = e;
					}
				}
			]]></constructor>
			<property name="_type"
				onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'type');" />
			<property name="_types"
				onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'types');" />
			<property name="_hash"
				onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'hash');" />
			<property name="checked" onget="return this._checkbox.checked;" />
			<property name="inputField" onget="return this._hash.inputField;" />
			<property name="isValid">
				<getter><![CDATA[
					try {
						if (this._hash.value.length) {
							new DTA.Hash(this._hash.value, this._type.value);
						}
						return true;
					}
					catch(ex) {
						return false;
					}
				]]></getter>
			</property>
			<property name="value">
				<getter><![CDATA[
					if (this._hash.value.length) {
						return new DTA.Hash(this._hash.value, this._type.value);
					}
					return null;
				]]></getter>
				<setter><![CDATA[
					if (val) {
						this._hash.value = val.sum;
						this._type.selectedItem = this._typemap[val.type];
					}
					else {
						this._hash.value = '';
					}
					return val;
				]]></setter>
			</property>
		</implementation>
	</binding>

	<binding id="menu-iconic-addressable"
		extends="chrome://global/content/bindings/menu.xml#menu-base">
		<content>
			<xul:hbox class="menu-iconic-left" align="center" pack="center">
				<xul:image class="menu-iconic-icon" xbl:inherits="src=image" />
			</xul:hbox>
			<xul:label class="menu-iconic-text" flex="1"
				xbl:inherits="value=label,accesskey,crop" crop="right" />
			<xul:hbox class="menu-accel-container" anonid="accel">
				<xul:label class="menu-iconic-accel" xbl:inherits="value=acceltext" />
			</xul:hbox>
			<xul:hbox class="menu-right" chromedir="&locale.dir;"
				xbl:inherits="_moz-menuactive,disabled" align="center" pack="center">
				<xul:image />
			</xul:hbox>
			<children includes="menupopup|template" />
		</content>
	</binding>

	<binding id="splitmenu">
		<content>
			<xul:menuitem class="menuitem-iconic splitmenu-menuitem" flex="1" xbl:inherits="label,disabled"/>
			<xul:menu class="splitmenu-menu" pack="end" oncommand="event.stopPropagation();" xbl:inherits="disabled">
				<children includes="menupopup"/>
			</xul:menu>
		</content>
	</binding>

	<binding id="speed-limit-list-popup"
		extends="chrome://global/content/bindings/popup.xml#popup-scrollbars">
		<implementation>
			<constructor><![CDATA[
				this.limit = -1;
				this.fill();
			]]></constructor>
			<property name="hint">
				<getter>
					return this._hint || 0;
				</getter>
				<setter>
					if (!isFinite(val)) {
						throw new Error("Provide a valid number");
					}
					if (this._hint != val) {
						this._hint = val;
					}
				</setter>
			</property>
			<property name="limit">
				<getter>
					return parseInt(this.parentNode.value) || -1;
				</getter>
				<setter><![CDATA[
					if (!isFinite(val)) {
						throw new Error("Provide a valid number");
					}
					let nval = this.scale(val / 1024);
					if (nval > 0) {
						nval *= 1024;
					}
					if (this.parentNode.value != nval) {
						this.parentNode.value = nval;
						this.fill();
					}
				]]></setter>
			</property>
			<property name="selectedItem">
				<setter><![CDATA[
					let pn = this.parentNode;
					if (pn.localName == 'menulist') {
						pn.selectedItem = val;
					}
					else {
						val.setAttribute('checked', 'true');
					}
				]]></setter>
			</property>
			<method name="appendItem">
				<parameter name="label"/>
				<parameter name="value"/>
				<parameter name="description"/>
				<body><![CDATA[
					let item = document.createElement('menuitem');
					item.setAttribute("label", label);
					item.setAttribute("value", value);
					if (description) {
						item.setAttribute("description", description);
					}
					item.className = 'menuitem-iconic';
					this.appendChild(item);
					return item;
				]]></body>
			</method>
			<method name="scale">
				<parameter name="e"/>
				<body><![CDATA[
					if (e <= 0) {
						return -1;
					}
					if (e >= 1000) {
						return Math.round(e / 25) * 25;
					}
					if (e >= 400) {
						return Math.round(e / 5) * 5;
					}
					return e;
				]]></body>
			</method>
			<method name="fill">
				<body><![CDATA[
					while (this.firstChild) {
						this.removeChild(this.firstChild);
					}

					let iv = Math.max(this.limit, -1);
					let m = Math.round((iv > 0 ? iv : this.hint / 2) / 1024);
					m = this.scale(iv > 1 ? m : 1000);
					let vals = [0, 10, 20, 50, 100, 1000, 2000, 5000];
					let items = [10, 50, 100, 250, 1000, 10000]; // always include these
					for (let v of vals) {
						if (v && m - v > 1) {
							items.push(m - v);
						}
						items.push(m + v);
					}
					// push some multiples
					items.push(m * 2);
					items.push(m * 5);
					items.push(m * 10);

					mapFilterInSitu(
						items,
						this.scale,
						function(e) {
							return !((e in this) || (this[e] = null))
						},
						{}
						).sort(function(a,b) {
							return a - b;
						});
					let sep = document.createElement('menuseparator');
					for (let v of mapInSitu(items, e => e * 1024)) {
						let item = this.appendItem(Utils.formatKBytes(v, 0) + '/s', v);
						if (v == iv) {
							if (item.previousSibling) {
								this.insertBefore(sep.cloneNode(false), item);
							}
							this.selectedItem = item;
							this.appendChild(sep.cloneNode(false));
						}
					}
					this.appendChild(sep);
					let item = this.appendItem(_('unlimitedspeed'), -1);
					if (iv == -1) {
						this.selectedItem = item;
					}
					return true;
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler phase="capturing" event="popupshowing"><![CDATA[
				this.fill();
			]]></handler>
			<handler phase="capturing" event="command"><![CDATA[
				if (event.originalTarget.localName != "menuitem") {
					return;
				}
				this.parentNode.blur();
				let nv = parseInt(event.originalTarget.value);
				if (nv != this.limit) {
					this.limit = nv;
				}
			]]></handler>
		</handlers>
	</binding>

	<binding id="mirror-item-base" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
		<implementation>
			<property name="mirror" onget="return this.getAttribute('mirror');" onset="this.setAttribute('mirror', nv);"/>
			<property name="preference" onget="return parseInt(this.getAttribute('preference')) || 50;">
				<setter><![CDATA[
					val = parseInt(val);
					if (isFinite(val)){
						val = Math.min(200, Math.max(1, val));
						this.setAttribute('preference', val);
					}
					val = this.preference;
					let tt;
					if (val > 130) {
						tt = _("prefHigh", [val]);
					}
					else if (val > 80) {
						tt = _("prefMedium", [val]);
					}
					else {
						tt = _("prefLow", [val]);
					}
					this.setAttribute("_preftooltip", tt);
				]]></setter>
			</property>
			<property name="charset" onget="return this.getAttribute('charset');"/>
		</implementation>
	</binding>
	<binding id="mirror-item" extends="chrome://dta/content/common/bindings.xml#mirror-item-base">
		<content>
			<xul:vbox pack="center">
				<xul:hbox pack="center">
					<xul:image class="mirror-item-icon" />
				</xul:hbox>
				<xul:label value="" class="mirror-item-error" xbl:inherits="value=error"/>
			</xul:vbox>
			<xul:hbox flex="1" align="center">
				<xul:label anonid="mirror" flex="1" crop="center" class="mirror-item-url text-link" xbl:inherits="value=mirror" />
			</xul:hbox>
			<xul:hbox align="center">
				<xul:label value="&preference;" />
				<xul:scale anonid="preference" class="mirror-item-preference" min="1" max="200" increment="5" pageincrement="30" xbl:inherits="value=preference,tooltiptext=_preftooltip" />
			</xul:hbox>
		</content>
		<implementation>
			<field name="mirrorElement">document.getAnonymousElementByAttribute(this, 'anonid', 'mirror');</field>
			<field name="preferenceElement">document.getAnonymousElementByAttribute(this, 'anonid', 'preference');</field>
			<constructor><![CDATA[
				// cheat to init
				this.preference = this.getAttribute('preference');
			]]></constructor>
		</implementation>
		<handlers>
			<handler event="click" clickcount="1"><![CDATA[
				if (event.originalTarget == this.mirrorElement) {
					this.setAttribute("editing", true);
				}
			]]></handler>
			<handler event="click" clickcount="2">
				this.setAttribute("editing", true);
			</handler>
			<handler event="change"><![CDATA[
				if (event.originalTarget == this.preferenceElement) {
					this.preference = this.preferenceElement.value;
				}
			]]></handler>
		</handlers>
	</binding>
	<binding id="mirror-item-editing" extends="chrome://dta/content/common/bindings.xml#mirror-item-base">
		<content>
			<xul:vbox pack="center">
				<xul:hbox pack="center">
					<xul:image class="mirror-item-icon" />
				</xul:hbox>
			</xul:vbox>
			<xul:hbox flex="1" align="center">
				<xul:label value="&mirrorurl;" />
				<xul:textbox class="mirror-item-textbox" xbl:inherits="value=mirror" type="autocomplete" wantreturns="true" autocompletesearch="history" completedefaultindex="true" flex="1"/>
			</xul:hbox>
		</content>
		<implementation>
			<field name="textbox">document.getAnonymousElementByAttribute(this, 'class', 'mirror-item-textbox');</field>
			<constructor><![CDATA[
				this.parentNode.selectedItem = this;
				this.textbox.focus();

				// looks a little nasty, but else we will immediately blur/focus :p
				setTimeoutOnlyFun(() => this.textbox.addEventListener('blur', () => this.commit(), false), 0);
			]]></constructor>
			<method name="commit">
				<parameter name="forget"/>
				<body><![CDATA[
					let original = this.getAttribute('mirror');
					let uri = this.textbox.value;

					if (!!forget) {
						uri = "";
					}

					if (!!uri) {
						uri = Services.fixups.createFixupURI(uri, 0).spec;
					}
					if (!!uri) {
						let evt = document.createEvent('MutationEvents');
						evt.initMutationEvent('MirrorChanging', true, true, this, original, uri, 'mirror', evt.MODIFICATION);
						if (this.dispatchEvent(evt)) {
							this.setAttribute('mirror', uri);
						}
					}
					try {
						this.textbox.blur();
					}
					catch (ex) {}
					this.removeAttribute('editing');
					this.blur();
					let evt = document.createEvent('UIEvents');
					evt.initUIEvent('MirrorEditDone', true, true, null, 0);
					this.dispatchEvent(evt);
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler event="keydown" phase="capturing"><![CDATA[
				switch(event.keyCode) {
				case KeyEvent.DOM_VK_RETURN:
				case KeyEvent.DOM_VK_ESCAPE:
					event.stopPropagation();
					event.preventDefault();
					break;
				}
			]]></handler>
			<handler event="keyup" phase="capturing"><![CDATA[
				if (event.keyCode == KeyEvent.DOM_VK_RETURN) {
					event.stopPropagation();
					event.preventDefault();
					this.commit();
				}
				if (event.keyCode == KeyEvent.DOM_VK_ESCAPE) {
					event.stopPropagation();
					event.preventDefault();
					this.commit(true);
					this.removeAttribute('editing');
				}
			]]></handler>
		</handlers>
	</binding>

	<binding id="downloadsearch" extends="chrome://global/content/bindings/textbox.xml#textbox">
		<content>
			<xul:hbox align="center" pack="start">
				<xul:image/>
			</xul:hbox>
			<children/>
			<xul:hbox class="textbox-input-box" flex="1" xbl:inherits="context,spellcheck">
				<html:input class="textbox-input" flex="1" anonid="input" xbl:inherits="onfocus,onblur,value,type,maxlength,disabled,size,readonly,tabindex,accesskey,noinitialfocus"/>
			</xul:hbox>
		</content>
		<implementation>
			<method name="clear">
				<body><![CDATA[
					this.value = '';
					this._search();
				]]></body>
			</method>
			<method name="_search">
				<body><![CDATA[
					log(LOG_DEBUG, "search called!");
					try {
						this._timer = null;
						var evt = document.createEvent('UIEvents');
						evt.initEvent('search', true, true);
						this.dispatchEvent(evt);
					}
					catch (ex) {
						log(LOG_ERROR, "_search", ex);
					}
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler event="input">
				if (!this.value) {
					if (this._timer) {
						clearTimeout(this._timer);
						this._timer = null;
					}
					this._search();
					return;
				}

				if (!this._timer) {
					let tp = this;
					this._timer = setTimeoutOnlyFun(function() {
						tp._search();
					}, 750);
				}
			</handler>
			<handler event="keypress" phase="capturing"><![CDATA[
				if (event.keyCode == KeyEvent.DOM_VK_ESCAPE) {
					event.preventDefault();
					event.stopPropagation();
					this.clear();
					this.blur();
					return;
				}
			]]></handler>
		</handlers>
	</binding>

	<binding id="treecol-matcher" extends="chrome://global/content/bindings/tree.xml#treecol-base">
		<content>
			<xul:label class="treecol-text box-inherit" xbl:inherits="crop,value=label" flex="1" crop="right" />
			<xul:dropmarker class="treecol-marker" xbl:inherits="sortDirection,hidden=hideheader,pack,align,orient,disabled"/>
		</content>
	</binding>

	<binding id="toolbar-lwauto" extends="chrome://global/content/bindings/toolbar.xml#toolbar">
		<implementation>
			<field name="_lwreftop">document.getElementById(this.getAttribute("lwreftop"))</field>
			<field name="_lwrefbottom">document.getElementById(this.getAttribute("lwrefbottom"))</field>
			<field name="_lwobs">Cc["@mozilla.org/observer-service;1"].getService(Ci.nsIObserverService)</field>
			<constructor><![CDATA[
				function doAfterPaint(i) {
					i = i || 8; // recalculate a few times here, as the bg images might be loaded asynchronously
					window.addEventListener("MozAfterPaint", function() {
						if (--i == 0) {
							window.removeEventListener("MozAfterPaint", arguments.callee, false);
						}
						try {
							_rl();
						}
						catch (ex) {}
					}, false);
				}

				let _rl = this._resizeListener = this._refreshLWAuto.bind(this);
				let _rs = this._resetLWAuto.bind(this);

				this._lwobm = {
					observe: function(s,t,d) {
						if (d && d != "null") {
							doAfterPaint();
						}
						else {
							_rs();
						}
					}
				};
				this._lwobm._self = this;
				this._lwobs.addObserver(this._lwobm, "lightweight-theme-styling-update", false);

				window.addEventListener("resize", this._resizeListener, true);
				doAfterPaint(4);
			]]></constructor>
			<destructor><![CDATA[
				this._lwobs.removeObserver(this._lwobm, "lightweight-theme-styling-update");
				window.removeEventListener("resize", this._resizeListener, true);

				this._resetLWAuto();
				delete this._lwobm;
			]]></destructor>
			<method name="_resetLWAuto">
				<body><![CDATA[
					this.style.background = "";
				]]></body>
			</method>
			<method name="_refreshLWAuto">
				<body><![CDATA[
					function poorMansSimilarity(a, b) {
						let sim = 0;
						for (let i = 0; i < a.length; ++i) {
							sim += Math.abs(a[i] - b[i]);
						}
						return sim;
					}

					function getElementAreaColor(elem, w, h) {
						// get pixel colors
						let bo = elem.boxObject;
						let canvas = document.createElementNS("http://www.w3.org/1999/xhtml","canvas");
						canvas.width = w;
						canvas.height = h;
						let ctx = canvas.getContext("2d");
						ctx.save();
						ctx.drawWindow(
							window,
							bo.x,
							bo.y + bo.height - canvas.height, w,
							canvas.height,
							"rgba(0,0,0,0)"
							);
						ctx.restore();
						let idata = ctx.getImageData(0, 0, canvas.width, canvas.height).data;

						// recursively extrapolate the best color
						return (function(ref, l) {
							l = l || 0;
							if (l > 4) {
								return ref;
							}
							let r = [], g = [], b = [], a = [];
							for (let i = 0; i < idata.length;) {
								let cr = idata[i++];
								let cg = idata[i++];
								let cb = idata[i++];
								let ca = idata[i++];
								if (l && poorMansSimilarity([cr, cg, cb, ca], ref) > 50) {
									continue;
								}
								r.push(cr);
								g.push(cg);
								b.push(cb);
								a.push(ca);
							}
							if (r.length < 5) {
								// whoops, removed a little too many colors :p
								return ref;
							}
							let newRef = [r,g,b,a].map(function(i) {
								return Math.round(i.reduce(function(p,c) {
									return p + c;
								}, 0) / i.length);
							});
							if (l && poorMansSimilarity(newRef, ref) < 5) {
								return newRef;
							}
							return arguments.callee(newRef, ++l);
						})();
					}

					let w = this.boxObject.width;
					let tc = getElementAreaColor(this._lwreftop, w, 10);
					let bc = getElementAreaColor(this._lwrefbottom, w, 4);
					if (poorMansSimilarity(tc, bc) < 30) {
						this.style.background = "rgba(" + tc.toString() + ")";
					}
					else {
						this.style.background = "-moz-linear-gradient(110deg, rgba(" + bc.toString() + "), rgba(" + tc.toString() + ") 40%)";
					}
				]]></body>
			</method>
		</implementation>
	</binding>
</bindings>
